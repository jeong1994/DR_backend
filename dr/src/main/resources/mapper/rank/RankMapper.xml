<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dr.mapper.rank.RankMapper">

<!-- 자기 자신 랭킹 조회 쿼리 -->
    <select id="getRankList" parameterType="Long" resultType="RankDTO">
        SELECT
            RANK_DATA.RANK,               -- 사용자 순위
            RANK_DATA.USER_NICKNAME,       -- 사용자 닉네임
            NVL(RANK_DATA.PHOTO_LOCAL, RANK_DATA.PROFILE_PIC) AS PHOTO_LOCAL, -- 사용자 프로필 사진 (가장 최신 사진 또는 PROFILE_PIC)
            RANK_DATA.SCORE_GET            -- 사용자 환경 기여 점수 합계
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,
                         U.USER_NICKNAME,
                     LP.PHOTO_LOCAL,
                     U.PROFILE_PIC,  -- 카카오 사진을 가져오기 위해 추가
                     SUM(S.SCORE_GET) AS SCORE_GET,
                     U.USER_NUMBER
                 FROM DR_USER U
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER
                          LEFT JOIN (
                     SELECT
                         P.USER_NUMBER,
                         P.PHOTO_LOCAL,
                         ROW_NUMBER() OVER (PARTITION BY P.USER_NUMBER ORDER BY P.PHOTO_UPLOAD DESC) AS RN
                     FROM DR_PHOTO P
                 ) LP ON U.USER_NUMBER = LP.USER_NUMBER AND LP.RN = 1
                 GROUP BY U.USER_NICKNAME, LP.PHOTO_LOCAL, U.USER_NUMBER, U.PROFILE_PIC
             ) RANK_DATA
        WHERE RANK_DATA.USER_NUMBER = #{userNumber}
    </select>

    <!-- 50위까지의 사용자 랭킹 조회 -->
    <select id="fiftyRankList" resultType="RankDTO">
    <![CDATA[
        SELECT
            RANK_DATA.RANK,               -- 사용자 순위
            RANK_DATA.USER_NICKNAME,       -- 사용자 닉네임
            RANK_DATA.PHOTO_LOCAL,         -- 사용자 프로필 사진
            RANK_DATA.SCORE_GET,            -- 사용자 환경 기여 점수 합계
            RANK_DATA.PROFILE_PIC,
            RANK_DATA.USER_NUMBER
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,  -- 점수 합계로 순위 계산
                         U.USER_NICKNAME,    -- 사용자 닉네임
                     P.PHOTO_LOCAL,                                              -- 프로필 사진
                     SUM(S.SCORE_GET) AS SCORE_GET,                               -- 점수 합계
                     U.USER_NUMBER,                                                -- 사용자 번호
                     U.PROFILE_PIC
                 FROM DR_USER U                                                    -- 사용자 테이블
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER                  -- 점수 테이블과 조인
                          LEFT JOIN DR_PHOTO P ON U.USER_NUMBER = P.USER_NUMBER             -- 사용자와 프로필 사진 조인
                 GROUP BY U.USER_NICKNAME, P.PHOTO_LOCAL, U.USER_NUMBER, U.PROFILE_PIC          -- 닉네임, 프로필 사진, 사용자 번호로 그룹화
             ) RANK_DATA
        WHERE RANK_DATA.RANK <= 50
    ]]>
    </select>

    <!-- 1등부터 5등까지 사용자 조회 -->
    <select id="Top5Rank" resultType="RankDTO">
        <![CDATA[
        SELECT
            RANK_DATA.RANK,               -- 사용자 순위
            RANK_DATA.USER_NICKNAME,       -- 사용자 닉네임
            RANK_DATA.PHOTO_LOCAL,         -- 사용자 프로필 사진
            RANK_DATA.SCORE_GET,            -- 사용자 환경 기여 점수 합계
            RANK_DATA.PROFILE_PIC, -- 카카오톡 유저 사진
            RANK_DATA.USER_NUMBER -- 유저 넘버
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,  -- 점수 합계로 순위 계산
                         U.USER_NICKNAME,    -- 사용자 닉네임
                     P.PHOTO_LOCAL,                                              -- 프로필 사진
                     SUM(S.SCORE_GET) AS SCORE_GET,                               -- 점수 합계
                     U.USER_NUMBER,                                                -- 사용자 번호
                     U.PROFILE_PIC                                                 -- 카카오톡 유저 사진
                 FROM DR_USER U                                                    -- 사용자 테이블
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER                  -- 점수 테이블과 조인
                          LEFT JOIN DR_PHOTO P ON U.USER_NUMBER = P.USER_NUMBER             -- 사용자와 프로필 사진 조인
                 GROUP BY U.USER_NICKNAME, P.PHOTO_LOCAL, U.USER_NUMBER, U.PROFILE_PIC          -- 닉네임, 프로필 사진, 사용자 번호로 그룹화
             ) RANK_DATA
        WHERE RANK_DATA.RANK <= 5
        ]]>
    </select>

    <!-- 월초 포인트 적립  -->
    <insert id="insertPoint" parameterType="PointCheckDTO">
        INSERT INTO DR_POINT (POINT_NUMBER, POINT_GET, POINT_NOTE, POINT_DATE, USER_NUMBER)
        VALUES (SEQ_POINT_NUMBER.NEXTVAL, #{pointGet}, #{pointNote}, SYSDATE, #{userNumber})
    </insert>

    <!-- 6등부터 10등까지 사용자 조회 -->
    <select id="top10Rank" resultType="RankDTO">
       <![CDATA[
        SELECT
            RANK_DATA.RANK,               -- 사용자 순위
            RANK_DATA.USER_NICKNAME,       -- 사용자 닉네임
            RANK_DATA.PHOTO_LOCAL,         -- 사용자 프로필 사진
            RANK_DATA.SCORE_GET,           -- 사용자 환경 기여 점수 합계
            RANK_DATA.PROFILE_PIC,
            RANK_DATA.USER_NUMBER
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,  -- 점수 합계로 순위 계산
                         U.USER_NICKNAME,    -- 사용자 닉네임
                     P.PHOTO_LOCAL,                                              -- 프로필 사진
                     SUM(S.SCORE_GET) AS SCORE_GET,                               -- 점수 합계
                     U.USER_NUMBER,                                                -- 사용자 번호
                     U.PROFILE_PIC
                 FROM DR_USER U                                                    -- 사용자 테이블
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER                  -- 점수 테이블과 조인
                          LEFT JOIN DR_PHOTO P ON U.USER_NUMBER = P.USER_NUMBER             -- 사용자와 프로필 사진 조인
                 GROUP BY U.USER_NICKNAME, P.PHOTO_LOCAL, U.USER_NUMBER, U.PROFILE_PIC          -- 닉네임, 프로필 사진, 사용자 번호로 그룹화
             ) RANK_DATA
        WHERE RANK_DATA.RANK BETWEEN 6 AND 10
        ]]>
    </select>

    <!-- 11등부터 20등까지 사용자 조회 -->
    <select id="top20Rank" resultType="RankDTO">
       <![CDATA[
        SELECT
            RANK_DATA.RANK,               -- 사용자 순위
            RANK_DATA.USER_NICKNAME,       -- 사용자 닉네임
            RANK_DATA.PHOTO_LOCAL,         -- 사용자 프로필 사진
            RANK_DATA.SCORE_GET,           -- 사용자 환경 기여 점수 합계
            RANK_DATA.PROFILE_PIC,
            RANK_DATA.USER_NUMBER
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,  -- 점수 합계로 순위 계산
                         U.USER_NICKNAME,    -- 사용자 닉네임
                     P.PHOTO_LOCAL,                                              -- 프로필 사진
                     SUM(S.SCORE_GET) AS SCORE_GET,                               -- 점수 합계
                     U.USER_NUMBER,                                                -- 사용자 번호
                     U.PROFILE_PIC
                 FROM DR_USER U                                                    -- 사용자 테이블
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER                  -- 점수 테이블과 조인
                          LEFT JOIN DR_PHOTO P ON U.USER_NUMBER = P.USER_NUMBER             -- 사용자와 프로필 사진 조인
                 GROUP BY U.USER_NICKNAME, P.PHOTO_LOCAL, U.USER_NUMBER, U.PROFILE_PIC          -- 닉네임, 프로필 사진, 사용자 번호로 그룹화
             ) RANK_DATA
        WHERE RANK_DATA.RANK BETWEEN 11 AND 20
        ]]>
    </select>

    <!-- 21등부터 30등까지 사용자 조회 -->
    <select id="top30Rank" resultType="RankDTO">
       <![CDATA[
        SELECT
            RANK_DATA.RANK,               -- 사용자 순위
            RANK_DATA.USER_NICKNAME,       -- 사용자 닉네임
            RANK_DATA.PHOTO_LOCAL,         -- 사용자 프로필 사진
            RANK_DATA.SCORE_GET,           -- 사용자 환경 기여 점수 합계
            RANK_DATA.PROFILE_PIC,
            RANK_DATA.USER_NUMBER
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,  -- 점수 합계로 순위 계산
                         U.USER_NICKNAME,    -- 사용자 닉네임
                     P.PHOTO_LOCAL,                                              -- 프로필 사진
                     SUM(S.SCORE_GET) AS SCORE_GET,                               -- 점수 합계
                     U.USER_NUMBER,                                                -- 사용자 번호
                     U.PROFILE_PIC
                 FROM DR_USER U                                                    -- 사용자 테이블
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER                  -- 점수 테이블과 조인
                          LEFT JOIN DR_PHOTO P ON U.USER_NUMBER = P.USER_NUMBER             -- 사용자와 프로필 사진 조인
                 GROUP BY U.USER_NICKNAME, P.PHOTO_LOCAL, U.USER_NUMBER, U.PROFILE_PIC          -- 닉네임, 프로필 사진, 사용자 번호로 그룹화
             ) RANK_DATA
        WHERE RANK_DATA.RANK BETWEEN 21 AND 30
        ]]>
    </select>

    <!-- 그외 등수 사용자 조회 -->
    <select id="topOtherRank" resultType="RankDTO">
       <![CDATA[
        SELECT
            RANK_DATA.RANK,               -- 사용자 순위
            RANK_DATA.USER_NICKNAME,       -- 사용자 닉네임
            RANK_DATA.PHOTO_LOCAL,         -- 사용자 프로필 사진
            RANK_DATA.SCORE_GET,           -- 사용자 환경 기여 점수 합계
            RANK_DATA.PROFILE_PIC,
            RANK_DATA.USER_NUMBER
        FROM (
                 SELECT
                     DENSE_RANK() OVER (ORDER BY SUM(S.SCORE_GET) DESC) AS RANK,  -- 점수 합계로 순위 계산
                         U.USER_NICKNAME,    -- 사용자 닉네임
                     P.PHOTO_LOCAL,       -- 프로필 사진
                     SUM(S.SCORE_GET) AS SCORE_GET,  -- 점수 합계
                     U.USER_NUMBER,       -- 사용자 번호
                     U.PROFILE_PIC
                 FROM DR_USER U
                          JOIN DR_SCORE S ON U.USER_NUMBER = S.USER_NUMBER         -- 점수 테이블과 조인
                          LEFT JOIN DR_PHOTO P ON U.USER_NUMBER = P.USER_NUMBER     -- 사용자와 프로필 사진 조인
                 GROUP BY U.USER_NICKNAME, P.PHOTO_LOCAL, U.USER_NUMBER, U.PROFILE_PIC -- 닉네임, 프로필 사진, 사용자 번호로 그룹화
             ) RANK_DATA
        WHERE RANK_DATA.RANK > 50  -- 51등 이후 모든 등수 데이터를 조회
        ]]>
    </select>

</mapper>