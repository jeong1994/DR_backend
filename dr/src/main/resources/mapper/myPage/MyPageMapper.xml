<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dr.mapper.myPage.MyPageMapper">
    <!--  자기 자신 정보 확인(내정보) -->
    <select id="getUserInfo" parameterType="Long" resultType="UserInfoDTO">
        SELECT
            U.USER_NICKNAME AS USER_NICKNAME,
            U.USER_EMAIL AS USER_EMAIL,
            U.USER_PHONE AS USER_PHONE,
            U.PROFILE_PIC AS PROFILE_PIC,
            NVL(S.ENVIRONMENT_SCORE, 0) AS ENVIRONMENT_SCORE,
            NVL(R.ENVIRONMENT_RANK, 0) AS ENVIRONMENT_RANK,
            NVL(P.TOTAL_POINTS, 0) AS TOTAL_POINTS,
            PH.PHOTO_LOCAL AS PHOTO
        FROM
            DR_USER U
                LEFT JOIN
            (SELECT
                 USER_NUMBER,
                 SUM(SCORE_GET) AS ENVIRONMENT_SCORE
             FROM
                 DR_SCORE
             GROUP BY USER_NUMBER) S ON U.USER_NUMBER = S.USER_NUMBER
                LEFT JOIN
            (SELECT
                 USER_NUMBER,
                 DENSE_RANK() OVER (ORDER BY SUM(SCORE_GET) DESC) AS ENVIRONMENT_RANK
             FROM
                 DR_SCORE
             GROUP BY USER_NUMBER) R ON U.USER_NUMBER = R.USER_NUMBER
                LEFT JOIN
            (SELECT
                 USER_NUMBER,
                 SUM(POINT_GET - POINT_USE) AS TOTAL_POINTS
             FROM
                 DR_POINT
             GROUP BY USER_NUMBER) P ON U.USER_NUMBER = P.USER_NUMBER
                LEFT JOIN
            (SELECT
                 USER_NUMBER,
                 PHOTO_LOCAL
             FROM
                 DR_PHOTO
             WHERE
                 PHOTO_LOCAL IS NOT NULL
            ) PH ON U.USER_NUMBER = PH.USER_NUMBER
        WHERE
            U.USER_NUMBER = ${userNumber}
    </select>

    <!-- 닉네임 업데이트 -->
    <update id="updateNickname">
        UPDATE DR_USER
        SET USER_NICKNAME = #{nickname}
        WHERE USER_NUMBER = #{userNumber}
    </update>

    <!-- 프로필 이미지 경로 업데이트 -->
    <update id="updateProfileImage">
        UPDATE DR_PHOTO
        SET PHOTO_LOCAL = #{photoLocal}
        WHERE USER_NUMBER = #{userNumber}
    </update>

    <!-- 닉네임 중복 확인 -->
    <select id="checkNickname" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM DR_USER
        WHERE USER_NICKNAME = #{userNickname}
    </select>

    <!--  회원 탈퇴 -->
    <delete id="deleteUser" parameterType="Long">
        DELETE FROM DR_USER
        WHERE USER_NUMBER = #{userNumber}
    </delete>

    <!--  내정보 포인트 내역 확인 -->
    <select id="pointHistory" parameterType="Long" resultType="PointDetailDTO">
        <![CDATA[
        SELECT DP.POINT_NUMBER, DP.POINT_NOTE,
               CASE WHEN DP.POINT_NOTE IN ('관리자회수', '상품구매') THEN -DP.POINT_USE
                    ELSE DP.POINT_GET END AS pointGet,
               TO_CHAR(DP.POINT_DATE, 'YYYY-MM-DD HH24:MI:SS') AS pointDate,
               COALESCE((SELECT SUM(
                                        CASE
                                            WHEN DP2.POINT_NOTE IN ('신규가입', '출석체크', '랭킹', '개근') THEN DP2.POINT_GET
                                            WHEN DP2.POINT_NOTE IN ('관리자회수', '상품구매') THEN -DP2.POINT_USE
                                            ELSE 0
                                            END)
                         FROM DR_POINT DP2
                         WHERE DP2.USER_NUMBER = DP.USER_NUMBER
                           AND DP2.POINT_DATE <= DP.POINT_DATE), 0) AS totalPoints
        FROM DR_POINT DP
        WHERE DP.USER_NUMBER = #{userNumber}
        ORDER BY DP.POINT_DATE DESC
        ]]>
    </select>

    <!--  내정보 내가 쓴 레시피 목록 -->
    <select id="getUserRecipe" parameterType="Long" resultType="UserRecipeDTO">
        SELECT
            R.RECIPE_NUMBER,
            P.RECIPE_PHOTO,
            R.RECIPE_TITLE,
            TO_CHAR(R.RECIPE_WRITE_DATE, 'YYYY-MM-DD') AS RECIPE_WRITE_DATE,
            -- 날짜 형식 변환
            (SELECT COUNT(*) FROM DR_GOOD G WHERE G.RECIPE_NUMBER = R.RECIPE_NUMBER) AS GOOD_COUNT,  -- 쉼표 추가
            R.RECIPE_TYPE
        FROM DR_RECIPE R
                 LEFT JOIN (
            SELECT
                PHOTO_ORIGINAL AS RECIPE_PHOTO,
                RECIPE_NUMBER,
                ROW_NUMBER() OVER (PARTITION BY RECIPE_NUMBER ORDER BY PHOTO_NUMBER) AS RN
            FROM DR_PHOTO
        ) P ON R.RECIPE_NUMBER = P.RECIPE_NUMBER AND P.RN = 1
        WHERE R.USER_NUMBER = #{userNumber}
        ORDER BY R.RECIPE_WRITE_DATE DESC
    </select>

    <!-- 내정보 내가 쓴 게시글 목록 -->
    <select id="getUserPost" parameterType="Long" resultType="UserPostDTO">
        SELECT
            ROW_NUMBER() OVER (ORDER BY B.BOARD_WRITE_DATE DESC) AS MY_POST_SEQ,
                B.BOARD_TITLE AS MY_POST_TITLE,
            B.BOARD_TYPE AS MY_POST_TYPE,
            NVL(GOOD_COUNT.LIKES, 0) AS MY_POSTGOOD_COUNT,
            TO_CHAR(B.BOARD_WRITE_DATE, 'YYYY-MM-DD') AS MY_POST_WRITE_DATE,
            B.BOARD_NUMBER AS BOARD_NUMBER,  -- 게시글 번호 추가
            B.USER_NUMBER AS USER_NUMBER
        FROM DR_BOARD B
                 LEFT JOIN (
            SELECT
                BOARD_NUMBER, COUNT(*) AS LIKES
            FROM DR_GOOD
            GROUP BY BOARD_NUMBER
        ) GOOD_COUNT ON B.BOARD_NUMBER = GOOD_COUNT.BOARD_NUMBER
        WHERE B.USER_NUMBER = #{userNumber}
        ORDER BY B.BOARD_WRITE_DATE DESC
    </select>

    <!-- 내정보 찜 목록 -->
    <select id="getUserSteam" parameterType="Long" resultType="UserSteamDTO">
        SELECT
        R.RECIPE_NUMBER,
        R.RECIPE_TITLE,               -- 레시피 제목
        U.USER_NICKNAME,              -- 작성자 닉네임
        P.PHOTO_ORIGINAL,                 -- 레시피 사진
        R.RECIPE_TYPE
        FROM
        DR_STEAM S
        JOIN
        DR_RECIPE R ON S.RECIPE_NUMBER = R.RECIPE_NUMBER
        JOIN
        DR_USER U ON R.USER_NUMBER = U.USER_NUMBER
        LEFT JOIN (
        SELECT
        PHOTO_ORIGINAL,
        RECIPE_NUMBER,
        ROW_NUMBER() OVER (PARTITION BY RECIPE_NUMBER ORDER BY PHOTO_NUMBER) AS RN  -- 사진 번호로 순번 매기기
        FROM
        DR_PHOTO
        ) P ON R.RECIPE_NUMBER = P.RECIPE_NUMBER AND P.RN = 1  -- 첫 번째 사진만 가져오기
        WHERE
        S.USER_NUMBER = #{userNumber}
        ORDER BY
        S.STEAM_DATE DESC <!-- 최신순 정렬하기! -->
    </select>

    <!-- 내정보 찜 목록 삭제 -->
    <delete id="deleteUserSteam" parameterType="UserSteamDTO">
        DELETE FROM DR_STEAM
        WHERE USER_NUMBER = #{userNumber}
          AND RECIPE_NUMBER = #{recipeNumber}
    </delete>

    <!-- 내정보 신고 내역  -->
    <select id="getSirenList" parameterType="Long" resultType="SirenListDTO">
        SELECT
            S.SIREN_NUMBER AS sirenNumber,
            COALESCE(B.BOARD_TITLE, R.RECIPE_TITLE, RP.REPLY_TEXT) AS titleAndContent,
            S.SIREN_TYPE AS sirenType,
            S.SIREN_REASON AS sirenReason,
            TO_CHAR(S.SIREN_DATE, 'YYYY-MM-DD') AS sirenDate,
            COALESCE(S.BOARD_NUMBER, RP.BOARD_NUMBER) AS boardNumber, -- 댓글의 게시글 번호를 포함
            S.RECIPE_NUMBER AS recipeNumber,
            S.REPLY_NUMBER AS replyNumber
        FROM DR_SIREN S
                 LEFT JOIN DR_BOARD B ON S.BOARD_NUMBER = B.BOARD_NUMBER
                 LEFT JOIN DR_RECIPE R ON S.RECIPE_NUMBER = R.RECIPE_NUMBER
                 LEFT JOIN DR_REPLY RP ON S.REPLY_NUMBER = RP.REPLY_NUMBER
                 LEFT JOIN DR_USER U ON (B.USER_NUMBER = U.USER_NUMBER OR R.USER_NUMBER = U.USER_NUMBER OR RP.USER_NUMBER = U.USER_NUMBER)
        WHERE U.USER_NUMBER = #{userNumber}
        ORDER BY S.SIREN_DATE DESC
    </select>

    <!-- 1. 오늘의 출석 여부 확인 -->
    <select id="todayCheck" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM DR_DAILY
        WHERE USER_NUMBER = #{userNumber}
          AND TRUNC(daily_date) = TRUNC(SYSDATE)
    </select>

    <!-- 2. 출석 기록 삽입 -->
    <insert id="insertCheck" parameterType="CheckDTO">
        INSERT INTO DR_DAILY (DAILY_NUMBER, USER_NUMBER, DAILY_DATE)
        VALUES (SEQ_DAILY_NUMBER.NEXTVAL, #{userNumber}, SYSDATE)
    </insert>

<!--    &lt;!&ndash; 3. 개근 여부 확인 (한 달간 개근 시 개근 인정) &ndash;&gt;-->
<!--    <select id="monthFullCheck" parameterType="long" resultType="int">-->
<!--    <![CDATA[--><!--        SELECT-->
<!--            CASE-->
<!--                WHEN COUNT(DISTINCT TRUNC(DAILY_DATE)) =-->
<!--                     (SELECT COUNT(*)-->
<!--                      FROM (-->
<!--                               SELECT TRUNC(SYSDATE, 'MM') + LEVEL - 1 AS day-->
<!--                               FROM DUAL-->
<!--                               CONNECT BY LEVEL <= TO_CHAR(LAST_DAY(TRUNC(SYSDATE, 'MM')), 'DD')-->
<!--                           ))-->
<!--                    THEN 1  &#45;&#45; 개근-->
<!--                ELSE 0  &#45;&#45; 개근 아님-->
<!--                END AS full_attendance-->
<!--        FROM-->
<!--            DR_DAILY-->
<!--        WHERE-->
<!--            USER_NUMBER = #{userNumber}-->
<!--          AND TRUNC(DAILY_DATE) BETWEEN TRUNC(SYSDATE, 'MM') AND LAST_DAY(SYSDATE)-->
<!--        GROUP BY USER_NUMBER-->
<!--        ]]>-->
<!--    </select>-->

    <!-- 3. 개근 여부 확인 (시연 테스트 : 15일 개근 시 개근 인정) -->
    <select id="monthFullCheck" parameterType="long" resultType="int">
    <![CDATA[
        SELECT
            CASE
                WHEN COUNT(DISTINCT TRUNC(DAILY_DATE)) = 14 THEN 1  -- 개근 (15일 연속 출석)
                ELSE 0  -- 개근 아님
                END AS full_attendance
        FROM
            DR_DAILY
        WHERE
            USER_NUMBER = #{userNumber}
          AND TRUNC(DAILY_DATE) BETWEEN TRUNC(SYSDATE - 13) AND TRUNC(SYSDATE)
        GROUP BY USER_NUMBER
        ]]>
    </select>

    <!-- 4. 출석체크 시 포인트 적립 -->
    <insert id="insertPointRecord" parameterType="PointCheckDTO">
        INSERT INTO DR_POINT (POINT_NUMBER, POINT_GET, POINT_NOTE, USER_NUMBER, POINT_DATE)
        VALUES (SEQ_POINT_NUMBER.NEXTVAL, #{pointGet}, #{pointNote}, #{userNumber}, SYSDATE)
    </insert>

    <!-- 5. 출석 체크 날짜 리스트 조회 -->
    <select id="getAttendanceDates" parameterType="long" resultType="CheckDTO">
        SELECT TO_CHAR(DAILY_DATE, 'YYYY-MM-DD') AS dailyDate
        FROM DR_DAILY
        WHERE USER_NUMBER = #{userNumber}
        ORDER BY DAILY_DATE DESC
    </select>
</mapper>